<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Replicon Local AI Runner</title>
  <link rel="stylesheet" href="style.css" />
</head>
<body>
  <div id="container">
    <h1>🤖 Replicon Local AI Runner Interface</h1>

    <label for="actionType">Select Action Type:</label>
    <select id="actionType">
      <option value="shell">Run Shell Command</option>
      <option value="python">Run Python</option>
      <option value="read">Read File</option>
      <option value="write">Write File</option>
      <option value="json">Run JSON</option>
    </select>

    <label for="inputBox">Input:</label>
    <textarea id="inputBox" placeholder="Enter command, file path, or JSON payload here..."></textarea>

    <div class="button-row">
      <button onclick="submitToRunner()">🚀 Submit to Runner</button>
      <button onclick="clearInput()">🧹 Clear Input</button>
      <button onclick="clearOutput()">🧹 Clear Output</button>
      <button onclick="openHelp()">📖 Help</button>
    </div>

    <div class="test-buttons">
      <button onclick="testFirebase()">✅ Test Firebase</button>
      <button onclick="testGitHub()">✅ Test GitHub</button>
      <button onclick="testVercel()">✅ Test Vercel</button>
    </div>

    <div class="output-controls">
      <button onclick="copyOutput()">📋 Copy Output</button>
      <button onclick="saveOutputToFile()">💾 Save Output to File</button>
    </div>

    <label for="outputBox">Output:</label>
    <textarea id="outputBox" readonly></textarea>
  </div>

  <script>
    function submitToRunner() {
      const action = document.getElementById("actionType").value;
      const input = document.getElementById("inputBox").value.trim();
      let payload = { action };

      switch (action) {
        case "shell":
        case "python":
          payload.inputData = input;
          break;
        case "read":
          payload.targetPath = input;
          break;
        case "write":
          try {
            JSON.parse(input);
            payload.inputData = input;
          } catch (e) {
            alert("For 'Write File', input must be valid JSON like:\n{\"filename\":\"test.txt\",\"content\":\"hello world\"}");
            return;
          }
          break;
        case "json":
          try {
            JSON.parse(input);
            payload.raw = input;
          } catch (e) {
            alert("For 'Run JSON', input must be valid JSON like:\n{\"type\":\"shell\",\"command\":\"ls\"}");
            return;
          }
          break;
        default:
          payload.inputData = input;
      }

      fetch("http://localhost:3001/run", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(payload)
      })
      .then(response => response.json())
      .then(data => {
        document.getElementById("outputBox").value = data.output;
      })
      .catch(error => {
        document.getElementById("outputBox").value = "❌ Error: " + error;
      });
    }

    function clearInput() {
      document.getElementById("inputBox").value = "";
    }

    function clearOutput() {
      document.getElementById("outputBox").value = "";
    }

    function openHelp() {
      fetch("http://localhost:3001/run", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          action: "read",
          targetPath: "operators-manual.md"
        }),
      })
      .then(response => response.json())
      .then(data => {
        document.getElementById("outputBox").value = data.output;
      })
      .catch(error => {
        document.getElementById("outputBox").value = "❌ Error: " + error;
      });
    }

    function testFirebase() {
      runTest({ action: "test_all_integrations", targets: ["firebase"] });
    }

    function testGitHub() {
      runTest({ action: "test_all_integrations", targets: ["github"] });
    }

    function testVercel() {
      runTest({ action: "test_all_integrations", targets: ["vercel"] });
    }

    function runTest(payload) {
      fetch("http://localhost:3001/run", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(payload),
      })
      .then(response => response.json())
      .then(data => {
        document.getElementById("outputBox").value = data.output;
      })
      .catch(error => {
        document.getElementById("outputBox").value = "❌ Error: " + error;
      });
    }

    function copyOutput() {
      const output = document.getElementById("outputBox").value;
      if (!output) {
        alert("No output to copy!");
        return;
      }
      navigator.clipboard.writeText(output).then(() => {
        alert("Output copied to clipboard!");
      }, () => {
        alert("Failed to copy output.");
      });
    }

    function saveOutputToFile() {
      const output = document.getElementById("outputBox").value;
      if (!output) {
        alert("No output to save!");
        return;
      }
      let filename = prompt("Enter filename (e.g. result.txt or info.md):", "output.txt");
      if (!filename) return;
      // Force file to be in file outputs/
      if (!filename.startsWith("file outputs/")) {
        filename = "file outputs/" + filename;
      }
      const payload = {
        action: "write",
        inputData: JSON.stringify({ filename, content: output })
      };
      fetch("http://localhost:3001/run", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(payload)
      })
      .then(response => response.json())
      .then(data => {
        alert(data.output);
      })
      .catch(error => {
        alert("❌ Error saving output: " + error);
      });
    }
  </script>
</body>
</html>
