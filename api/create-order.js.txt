// api/create-order.js

const fetch = require('node-fetch');

module.exports = async (req, res) => {
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method Not Allowed' });
  }

  const { amount } = req.body;
  if (!amount) {
    return res.status(400).json({ error: 'Missing amount in request body' });
  }

  const clientId = process.env.PAYPAL_CLIENT_ID;
  const secret   = process.env.PAYPAL_CLIENT_SECRET;
  if (!clientId || !secret) {
    return res
      .status(500)
      .json({ error: 'PayPal credentials not configured in Vercel env vars' });
  }

  try {
    // 1) Get OAuth token
    const tokenResp = await fetch(
      'https://api.sandbox.paypal.com/v1/oauth2/token',
      {
        method: 'POST',
        headers: {
          Authorization:
            'Basic ' +
            Buffer.from(`${clientId}:${secret}`).toString('base64'),
          'Content-Type': 'application/x-www-form-urlencoded',
        },
        body: 'grant_type=client_credentials',
      }
    );
    if (!tokenResp.ok) {
      const text = await tokenResp.text();
      return res
        .status(502)
        .json({ error: `Token fetch failed: ${tokenResp.status} ${text}` });
    }
    const { access_token: token } = await tokenResp.json();

    // 2) Create the order
    const orderResp = await fetch(
      'https://api.sandbox.paypal.com/v2/checkout/orders',
      {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          Authorization: `Bearer ${token}`,
        },
        body: JSON.stringify({
          intent: 'CAPTURE',
          purchase_units: [{ amount: { currency_code: 'USD', value: amount } }],
        }),
      }
    );
    if (!orderResp.ok) {
      const text = await orderResp.text();
      return res
        .status(502)
        .json({ error: `Order creation failed: ${orderResp.status} ${text}` });
    }
    const { id } = await orderResp.json();
    return res.status(200).json({ id });
  } catch (error) {
    console.error('create-order error:', error);
    return res.status(500).json({ error: error.message });
  }
};
